{"version":3,"file":"bundle.21b956cb879a0e07c866.js","mappings":";;;;;;;;;;;;AAAwD;;AAExD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,MAAM;AACxB;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0CAA0C,aAAa;AACvD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yCAAyC,qEAAkB;;AAE3D;AACA;;AAEA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wCAAwC,MAAM;AAC9C,6CAA6C,uCAAuC;AACpF,+CAA+C,KAAK;AACpD;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;;;ACjM+T;;AAExT;AACP;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;AACA,eAAe,gEAAe;AAC9B;AACA;;AAEA;AACA,eAAe,+DAAc;AAC7B;AACA;;AAEA;AACA,eAAe,+DAAc;AAC7B;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,6DAAY;AAChC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,eAAe,+DAAc;AAC7B;AACA;;AAEA;;AAEA;;AAEA,cAAc,gEAAe;;AAE7B;AACA;AACA;AACA,oBAAoB,iEAAgB;AACpC;AACA;AACA,oBAAoB,iEAAgB;AACpC;AACA;AACA,oBAAoB,iEAAgB;AACpC;AACA;;AAEA;AACA,kBAAkB,gEAAe;AACjC;AACA;;AAEA,iCAAiC,6DAAY,aAAa,gEAAe;;AAEzE;;AAEA;;AAEO;AACP;AACA;AACA;;AAEA;;AAEA,oBAAoB,WAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEO;AACP;;AAEA;;AAEA,cAAc,+DAAc;AAC5B,mBAAmB;;AAEnB;AACA,iBAAiB,gEAAe;AAChC;AACA;AACA;AACA;AACA;;AAEA,cAAc,+DAAc;;AAE5B;AACA;;AAEO;AACP;AACA;AACA;;AAEA;;AAEA;AACA,qBAAqB,kEAAiB;AACtC,0BAA0B,wEAAuB;;AAEjD;AACA,mBAAmB,+EAA8B;AACjD;AACA;;AAEA,qBAAqB,8DAAa;AAClC,oBAAoB,4DAAW;;AAE/B;;AAEA,oBAAoB,QAAQ;AAC5B,uCAAuC,+DAAc;AACrD,iDAAiD,+DAAc;AAC/D;AACA;;AAEA;AACA,GAAG;;AAEH,qBAAqB,+DAAc;AACnC;;;AAGO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3MA;AACA,WAAW,0CAA0C;AACrD,WAAW,0CAA0C;AACrD,WAAW,0CAA0C;AACrD,WAAW,0CAA0C;AACrD,WAAW,0CAA0C;AACrD,WAAW,0CAA0C;AACrD,WAAW,0CAA0C;AACrD,WAAW,0CAA0C;AACrD,WAAW,0CAA0C;AACrD,WAAW,0CAA0C;AACrD;;AAEA;AACA,WAAW,uCAAuC;AAClD,WAAW,uCAAuC;AAClD,WAAW,uCAAuC;AAClD,WAAW,uCAAuC;AAClD,WAAW,uCAAuC;AAClD,WAAW,uCAAuC;AAClD,WAAW,uCAAuC;AAClD,WAAW,uCAAuC;AAClD,WAAW,uCAAuC;AAClD,WAAW,uCAAuC;AAClD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;AAKA;AACA,WAAW,sCAAsC;AACjD;;AAEA;AACA,WAAW,0CAA0C;AACrD;;;;AAIA;AACA,WAAW,qBAAqB;AAChC,WAAW,qBAAqB;AAChC,WAAW,qBAAqB;AAChC,WAAW,qBAAqB;AAChC,WAAW,qBAAqB;AAChC,WAAW,qBAAqB;AAChC,WAAW,qBAAqB;AAChC,WAAW,qBAAqB;AAChC,WAAW,qBAAqB;AAChC,WAAW,qBAAqB;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC7IyG;;AAEzG;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA,qBAAqB,yEAAwB;AAC7C,oBAAoB,yEAAwB;;AAE5C,YAAY;AACZ;;AAEA;AACA;AACA,eAAe,0EAAyB;AACxC,MAAM;AACN,eAAe,0EAAyB;AACxC,MAAM;AACN,eAAe,0EAAyB;AACxC;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;;AAEA;;AAEA,WAAW,mBAAmB;;AAE9B;;AAEA,0BAA0B,+DAAc;;AAExC;;AAEA;;AAEA;AACA;;;;;;;;;;;;;;;;;AC/DO;AACP;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEO;AACP,KAAK,sCAAsC;AAC3C,KAAK,wCAAwC;AAC7C,KAAK,wCAAwC;AAC7C;;;;;;;;;;;;ACtCgD;;AAEhD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,MAAM;AACxB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,0CAA0C,aAAa;AACvD;AACA;AACA;;AAEA;AACA,oBAAoB,6DAAU;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;UCzCA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACN2B","sources":["webpack://dami-ui/./src/barcode/barcode.js","webpack://dami-ui/./src/barcode/encoding-service.js","webpack://dami-ui/./src/barcode/encoding-structure.js","webpack://dami-ui/./src/qrcode/encoding-service.js","webpack://dami-ui/./src/qrcode/encoding-structure.js","webpack://dami-ui/./src/qrcode/qrcode.js","webpack://dami-ui/webpack/bootstrap","webpack://dami-ui/webpack/runtime/define property getters","webpack://dami-ui/webpack/runtime/hasOwnProperty shorthand","webpack://dami-ui/webpack/runtime/make namespace object","webpack://dami-ui/./src/index.js"],"sourcesContent":["import { chooseEncodingType } from \"./encoding-service\";\n\nconst svgns = \"http://www.w3.org/2000/svg\";\n\nconst template = document.createElement(\"template\");\ntemplate.innerHTML = `\n    <style>\n        svg {\n            border: solid 1px rgba(0, 0, 0, 0.2);\n            border-radius: 10px;\n        }\n    </style>\n    <svg xmlns=\"${svgns}\"></svg>\n`\n\nclass DamiBarcode extends HTMLElement {\n    constructor() {\n        super();\n        this.initShadow();\n\n        this.xyPadding = 10;\n\n        this.width = 300;\n        this.height = 300 / 3;\n        this.color = \"black\";\n        this.background = \"white\";\n        this.font = \"Consolas, Monaco, Sans Mono, monospace, sans-serif\";\n    }\n\n    initShadow() {\n        const shadow = this.attachShadow({mode: \"open\"});\n        shadow.append(template.content.cloneNode(true));\n        this.svgElm = shadow.querySelector(\"svg\");\n    }\n\n    initSvgSize() {\n        const width = this.getAttribute(\"width\") ? Number(this.getAttribute(\"width\")) : this.width;\n        const height = this.getAttribute(\"height\") ? Number(this.getAttribute(\"height\")) : Math.trunc(width / 3);\n\n        if (typeof width === \"number\" && typeof height === \"number\") {\n            this.svgElm.setAttribute(\"width\", width);\n            this.svgElm.setAttribute(\"height\", height);\n        } else {\n            console.error(\"Enter both width and height and all numbers.\");\n        }\n    }\n\n    initRectWithSize(x, y, width, height, color) {\n        const rectElm = document.createElementNS(svgns, \"rect\");\n\n        rectElm.setAttribute(\"width\", width);\n        rectElm.setAttribute(\"height\", height);\n\n        rectElm.setAttribute(\"x\", x);\n        rectElm.setAttribute(\"y\", y);\n        \n        rectElm.setAttribute(\"fill\", color);\n\n        return rectElm;\n    }\n\n    connectedCallback() {\n        this.initSvgSize();\n\n        const background = this.getAttribute(\"background\") ? this.getAttribute(\"background\") : this.background;\n        this.svgElm.style.background = background;\n\n        this.drawBarcode();\n    }\n\n    static get observedAttributes() {\n        return [\"width\", \"height\", \"type\", \"value\", \"color\", \"background\"];\n    }\n    \n    attributeChangedCallback(name, oldValue, newValue) {\n        \n    }\n\n    drawBarcode() {\n        if (this.getAttribute(\"type\") && this.getAttribute(\"value\")) {\n            const encodingValAndChksum = chooseEncodingType(this.getAttribute(\"type\"), this.getAttribute(\"value\"));\n\n            const value = !this.hasAttribute(\"no-text\") ? this.getAttribute(\"value\") : \"\";\n            const checksum = !this.hasAttribute(\"no-checksum\") && !this.hasAttribute(\"no-text\") ? encodingValAndChksum?.[1] : \"\";\n\n            if (!encodingValAndChksum || !encodingValAndChksum?.[0]) return;\n\n            this.fillRectBlocks(encodingValAndChksum[0]);\n            this.createTextCenterBottom(value, checksum);\n        } else {\n            console.error(\"Properly enter type and value property for barcode.\");\n        }\n    }\n\n    fillRectBlocks(codeValue) {\n        const rectDimention = this.getRectDimentions(codeValue.length);\n        const startPos = this.getRectStartPos();\n\n        const rectBlocks = this.makeRectBlocks(codeValue);\n\n        const color = this.getAttribute(\"color\") ? this.getAttribute(\"color\") : this.color;\n        const background = this.getAttribute(\"background\") ? this.getAttribute(\"background\") : this.background;\n\n        let swt = true;\n\n        rectBlocks.forEach(blockLen => {\n            const width = rectDimention[0] * blockLen;\n            const height = rectDimention[1];\n\n            const startX = startPos[0];\n            const startY = startPos[1];\n\n            const rectElm = this.initRectWithSize(startX, startY, width, height, swt ? color : background);\n            this.svgElm.appendChild(rectElm);\n\n            startPos[0] += width;\n\n            swt = !swt;\n        });\n    }\n\n    makeRectBlocks(codeValue) {\n        let checkVal = null;\n        const blockAry = [];\n\n        codeValue.split(\"\").forEach(code => {\n            if (checkVal !== code) {\n                checkVal = code;\n                blockAry.push(1);\n            } else {\n                blockAry[blockAry.length - 1]++;\n            }\n        });\n\n        return blockAry;\n    }\n\n    getSvgDimentions() {\n        const width = this.svgElm?.clientWidth;\n        const height = this.svgElm?.clientHeight;\n    \n        if (width === undefined || height === undefined) return;\n        return [width, height];\n    }\n\n    getRectDimentions(noOfRect) {\n        const xPaddingPct = this.xyPadding * 2;\n        const yPaddingPct = this.xyPadding * 2 * 2;\n    \n        const svgDimentions = this.getSvgDimentions();\n    \n        if (!svgDimentions) return;\n    \n        const contWidth = ( (100 - xPaddingPct) * svgDimentions[0] ) / 100;\n        const contHeight = ( (100 - yPaddingPct) * svgDimentions[1] ) / 100;\n    \n        return [contWidth / noOfRect, contHeight];\n    }\n\n    getRectStartPos() {\n        const svgDimentions = this.getSvgDimentions();\n    \n        if (!svgDimentions) return;\n    \n        return [( this.xyPadding * svgDimentions[0] / 100),\n                ( this.xyPadding * svgDimentions[1] ) / 100];\n    }\n\n    createTextCenterBottom(value, checksum) {\n        const textElm = document.createElementNS(svgns, \"text\");\n\n\n\n        const color = this.getAttribute(\"color\") ? this.getAttribute(\"color\") : this.color;\n        const font = this.getAttribute(\"font\") ? this.getAttribute(\"font\") : this.font;\n\n        textElm.setAttribute(\"text-anchor\", \"middle\");\n        textElm.setAttribute(\"dominant-baseline\", \"middle\");\n    \n        textElm.setAttribute(\"x\", \"50%\");\n        textElm.setAttribute(\"y\", \"90%\");\n        textElm.setAttribute(\"fill\", `${color}`);\n        textElm.setAttribute(\"font-size\", `${0.05 * (this.svgElm?.clientWidth ?? 0)}`);\n        textElm.setAttribute(\"font-family\", `${font}`);\n        \n        var textNode = document.createTextNode(value.trim() + checksum.trim());\n        textElm.appendChild(textNode);\n    \n        this.svgElm.appendChild(textElm);\n    }\n\n}\n\ncustomElements.define(\"dami-barcode\", DamiBarcode);\n","import { CODE11_ENCODING, CODE11_MARKERS, EAN13_STRUCTURE, EAN8_STRUCTURE, EAN_UPC_ENCODING, EAN_UPC_MARKERS, UPCA_STRUCTURE, UPCE_MARKERS, UPCE_PATTERN, UPCE_STRUCTURE, CODE39_CHARACTERS, CODE39_BARS, CODE39_SPACES, CODE39_MARKERS, CODE39_OTHER_CHARACTERS, CODE39_OTHER_CHARACTERS_ENCODE } from './encoding-structure';\n\nexport function calcChecksumEanUpc(value) {\n    let sum = 0;\n    for (const [index, digit] of value.split(\"\").reverse().entries()) {\n      if (index % 2 <= 0) {\n        sum += (Number(digit) * 3);    \n      } else {\n        sum += (Number(digit) * 1);   \n      }\n    }\n\n    return (10 - (sum % 10)) > 9 ? \"0\" : (10 - (sum % 10)).toString();\n}\n\nexport function eanUpcEncoder(value, type) {\n    let struct;\n    if (type === \"EAN13\") {\n      struct = EAN13_STRUCTURE.get(value[0]);\n      value = value.slice(1) + calcChecksumEanUpc(value);\n    }\n\n    if (type === \"EAN8\") {\n      struct = EAN8_STRUCTURE.get(\"0\");\n      value = value + calcChecksumEanUpc(value);\n    }\n\n    if (type === \"UPCA\") {\n      struct = UPCA_STRUCTURE.get(\"0\");\n      value = value + calcChecksumEanUpc(value);\n    }\n\n    if (type === \"UPCE\") {\n      let lastDigit = value[value.length - 1];\n      let valAry = value.split(\"\").reverse();\n      let pattern = UPCE_PATTERN.get(lastDigit);\n      if (!pattern) return;\n      let upcaEquv = pattern.split(\"\").map(chr => {\n        if (chr === \"X\") return valAry.pop();\n        return chr;\n      }).join(\"\");\n      let checksum = calcChecksumEanUpc(upcaEquv);\n      struct = UPCE_STRUCTURE.get(checksum);\n      struct.lastGroup = \"\";\n    }\n\n    if (!struct) return;\n\n    let encode = \"\";\n\n    encode += EAN_UPC_MARKERS.startMarker;\n\n    for (const [index, str] of (struct.firstGroup + struct.lastGroup).split(\"\").entries()) {\n      switch (str) {\n        case \"L\":\n          encode += EAN_UPC_ENCODING.get(value[index])?.lCode;\n          break;\n        case \"G\":\n          encode += EAN_UPC_ENCODING.get(value[index])?.gCode;\n          break;\n        case \"R\":\n          encode += EAN_UPC_ENCODING.get(value[index])?.rCode;\n          break;\n      }\n\n      if (type !== \"UPCE\" && index === struct.firstGroup.length - 1) {\n        encode += EAN_UPC_MARKERS.centerMarker;\n      }\n    }\n\n    encode += (type === \"UPCE\" ? UPCE_MARKERS.endMarker : EAN_UPC_MARKERS.endMarker);\n\n    return encode;\n\n}\n\nexport function calcChecksumCode11(value) {\n    let sum = 0;\n    const ck = [\"\", \"\"];\n    const divideBy = [10, 9];\n\n    let calcK = value.length > 10 ? 2 : 1;\n\n    for (let i = 0; i < calcK; i++) {\n      for (const [index, digit] of value.split(\"\").reverse().entries()) {\n        const mul = (index + 1) % divideBy[i] <= 0 ? divideBy[i] : (index + 1) % divideBy[i];\n        const num = digit === \"-\" ? 10 : Number(digit);\n  \n        sum += (num * mul);\n      }\n      ck[i] = (sum % 11).toString();\n  \n      value += ck[i];\n      sum = 0;\n    }\n\n    return ck.join(\"\");\n    \n}\n\nexport function code11Encoder(value) {\n    value = value + calcChecksumEanUpc(value);\n\n    let encode = \"\";\n\n    encode += CODE11_MARKERS.startMarker;\n    encode += \"0\"; // Gap between codes\n\n    for (const chr of value) {\n      let code = CODE11_ENCODING.get(chr);\n      if (code) {\n        encode += code;\n        encode += \"0\";\n      }\n    }\n\n    encode += CODE11_MARKERS.endMarker;\n\n    return encode;\n}\n\nexport function code39Encoder(value) {\n  const charList = value.split(\"\");\n  charList.push(\"*\");\n  charList.unshift(\"*\");\n\n  const encode = [];\n\n  charList.forEach(chr => {\n    const chrIndex = CODE39_CHARACTERS.indexOf(chr);\n    const otherChrIndex = CODE39_OTHER_CHARACTERS.indexOf(chr);\n\n    if (chrIndex < 0 && otherChrIndex >= 0) {\n      encode.push( CODE39_OTHER_CHARACTERS_ENCODE.get(chr) );\n      return;\n    }\n\n    const spacePos = CODE39_SPACES[ Math.trunc( chrIndex / 10 ) ];\n    const barsPos = CODE39_BARS[ chrIndex % 10 ];\n\n    const chrCode = [];\n\n    for (let i = 1; i < 10; i++) {\n      if (spacePos === i) chrCode.push(CODE39_MARKERS.space);\n      else if (barsPos.includes(i)) chrCode.push(CODE39_MARKERS.bar);\n      else chrCode.push(i % 2);\n    }\n\n    encode.push( chrCode.join(\"\") );\n  });\n\n  return encode.join(CODE39_MARKERS.narrowSpace);\n}\n\n\nexport function chooseEncodingType(type, value) {\n    switch(type?.toUpperCase()) {\n      case \"EAN13\":\n        if (value.length !== 12 || !( /^\\d+$/.test(value) )) {\n          console.error(\"Dami UI barcode: number of symbols needed is 12 and all digits.\");\n          break;\n        }\n        return [eanUpcEncoder(value, type.toUpperCase()), calcChecksumEanUpc(value)];\n\n      case \"EAN8\":\n        if (value.length !== 7 || !( /^\\d+$/.test(value) )) {\n          console.error(\"Dami UI barcode: number of symbols needed is 7 and all digits.\");\n          break;\n        }\n        return [eanUpcEncoder(value, type.toUpperCase()), calcChecksumEanUpc(value)];\n\n      case \"UPCA\":\n        if (value.length !== 11 || !( /^\\d+$/.test(value) )) {\n          console.error(\"Dami UI barcode: number of symbols needed is 11 and all digits.\");\n          break;\n        }\n        return [eanUpcEncoder(value, type.toUpperCase()), calcChecksumEanUpc(value)];\n\n      case \"UPCE\":\n        if (value.length !== 6 || !( /^\\d+$/.test(value) )) {\n          console.error(\"Dami UI barcode: number of symbols needed is 6 and all digits.\");\n          break;\n        }\n        return [eanUpcEncoder(value, type.toUpperCase()), calcChecksumEanUpc(value)];\n\n      case \"CODE11\":\n        if (!( /^(\\d|-)+$/.test(value) )) {\n          console.error(\"Dami UI barcode: should contain digit and/or hyphen(-).\");\n          break;\n        }\n        return [code11Encoder(value), calcChecksumCode11(value)];\n\n      case \"CODE39\":\n        if (!( /^[A-Z0-9 \\-.\\$\\/\\+\\%]*$/.test(value) )) {\n          console.error(\"Dami UI barcode: should contain digits, capital alphapetic character, '-', '.', '[space]', '$', '/', '+', '%'.\");\n          break;\n        }\n        return [code39Encoder(value), \"\"];\n\n      default:\n        console.error(`Dami UI barcode: Give proper barcode type for encoding.`);\n        break;\n    }\n}\n","const EAN13_STRUCTURE = new Map([\n    [\"0\", {firstGroup: \"LLLLLL\", lastGroup: \"RRRRRR\"}],\n    [\"1\", {firstGroup: \"LLGLGG\", lastGroup: \"RRRRRR\"}],\n    [\"2\", {firstGroup: \"LLGGLG\", lastGroup: \"RRRRRR\"}],\n    [\"3\", {firstGroup: \"LLGGGL\", lastGroup: \"RRRRRR\"}],\n    [\"4\", {firstGroup: \"LGLLGG\", lastGroup: \"RRRRRR\"}],\n    [\"5\", {firstGroup: \"LGGLLG\", lastGroup: \"RRRRRR\"}],\n    [\"6\", {firstGroup: \"LGGGLL\", lastGroup: \"RRRRRR\"}],\n    [\"7\", {firstGroup: \"LGLGLG\", lastGroup: \"RRRRRR\"}],\n    [\"8\", {firstGroup: \"LGLGGL\", lastGroup: \"RRRRRR\"}],\n    [\"9\", {firstGroup: \"LGGLGL\", lastGroup: \"RRRRRR\"}],\n]);\n\nconst EAN_UPC_ENCODING = new Map([\n    [\"0\", {lCode: \"0001101\", gCode: \"\", rCode: \"\"}],\n    [\"1\", {lCode: \"0011001\", gCode: \"\", rCode: \"\"}],\n    [\"2\", {lCode: \"0010011\", gCode: \"\", rCode: \"\"}],\n    [\"3\", {lCode: \"0111101\", gCode: \"\", rCode: \"\"}],\n    [\"4\", {lCode: \"0100011\", gCode: \"\", rCode: \"\"}],\n    [\"5\", {lCode: \"0110001\", gCode: \"\", rCode: \"\"}],\n    [\"6\", {lCode: \"0101111\", gCode: \"\", rCode: \"\"}],\n    [\"7\", {lCode: \"0111011\", gCode: \"\", rCode: \"\"}],\n    [\"8\", {lCode: \"0110111\", gCode: \"\", rCode: \"\"}],\n    [\"9\", {lCode: \"0001011\", gCode: \"\", rCode: \"\"}],\n]);\n\nconst EAN_UPC_MARKERS = {\n    startMarker: \"101\",\n    centerMarker: \"01010\",\n    endMarker: \"101\",\n};\n\nfor (const obj of EAN_UPC_ENCODING.values()) {\n    obj.rCode = obj.lCode.\n                    trim().\n                    split(\"\").\n                    map(chr => chr === \"0\" ? \"1\" : \"0\").\n                    join(\"\");\n\n    obj.gCode = obj.rCode.\n                trim().split(\"\").reverse().join(\"\");\n}\n\n\n\n\nconst EAN8_STRUCTURE = new Map([\n    [\"0\", {firstGroup: \"LLLL\", lastGroup: \"RRRR\"}],\n]);\n\nconst UPCA_STRUCTURE = new Map([\n    [\"0\", {firstGroup: \"LLLLLL\", lastGroup: \"RRRRRR\"}],\n]);\n\n\n\nconst UPCE_STRUCTURE = new Map([\n    [\"0\", {firstGroup: \"GGGLLL\"}],\n    [\"1\", {firstGroup: \"GGLGLL\"}],\n    [\"2\", {firstGroup: \"GGLLGL\"}],\n    [\"3\", {firstGroup: \"GGLLLG\"}],\n    [\"4\", {firstGroup: \"GLGGLL\"}],\n    [\"5\", {firstGroup: \"GLLGGL\"}],\n    [\"6\", {firstGroup: \"GLLLGG\"}],\n    [\"7\", {firstGroup: \"GLGLGL\"}],\n    [\"8\", {firstGroup: \"GLGLLG\"}],\n    [\"9\", {firstGroup: \"GLLGLG\"}],\n]);\n\nconst UPCE_PATTERN = new Map([\n    [\"0\", \"0XX00000XXX\"],\n    [\"1\", \"0XX10000XXX\"],\n    [\"2\", \"0XX20000XXX\"],\n    [\"3\", \"0XXX00000XX\"],\n    [\"4\", \"0XXXX00000X\"],\n    [\"5\", \"0XXXXX00005\"],\n    [\"6\", \"0XXXXX00006\"],\n    [\"7\", \"0XXXXX00007\"],\n    [\"8\", \"0XXXXX00008\"],\n    [\"9\", \"0XXXXX00009\"],\n]);\n\nconst UPCE_MARKERS = {\n    endMarker: \"010101\",\n};\n\n\nconst CODE11_ENCODING = new Map([\n    [\"0\",  \"101011\"],\n    [\"1\",  \"1101011\"],\n    [\"2\",  \"1001011\"],\n    [\"3\",  \"1100101\"],\n    [\"4\",  \"1011011\"],\n    [\"5\",  \"1101101\"],\n    [\"6\",  \"1001101\"],\n    [\"7\",  \"1010011\"],\n    [\"8\",  \"1101001\"],\n    [\"9\",  \"110101\"],\n    [\"-\",  \"101101\"],\n]);\n\nconst CODE11_MARKERS = {\n    startMarker: \"1011001\",\n    endMarker: \"1011001\",\n};\n\nconst CODE39_CHARACTERS = \"1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ-. *\";\n\nconst CODE39_OTHER_CHARACTERS = \"$/+%\";\n\nconst CODE39_OTHER_CHARACTERS_ENCODE = new Map([\n    [\"$\", \"100100100101\"],\n    [\"/\", \"100100101001\"],\n    [\"+\", \"100101001001\"],\n    [\"%\", \"101001001001\"],\n]);\n\nconst CODE39_BARS = [\n    [1, 9],\n    [3, 9],\n    [1, 3],\n    [5, 9],\n    [1, 5],\n    [3, 5],\n    [7, 9],\n    [1, 7],\n    [3, 7],\n    [5, 7],\n]\n\nconst CODE39_SPACES = [\n    4,\n    6,\n    8,\n    2,\n]\n\nconst CODE39_MARKERS = {\n    bar: \"11\",\n    space: \"00\",\n    narrowSpace: \"0\",\n};\n\nexport {\n    EAN13_STRUCTURE,\n    EAN_UPC_ENCODING,\n    EAN_UPC_MARKERS,\n    EAN8_STRUCTURE,\n    UPCA_STRUCTURE,\n    UPCE_STRUCTURE,\n    UPCE_PATTERN,\n    UPCE_MARKERS,\n    CODE11_ENCODING,\n    CODE11_MARKERS,\n    CODE39_CHARACTERS,\n    CODE39_BARS,\n    CODE39_SPACES,\n    CODE39_MARKERS,\n    CODE39_OTHER_CHARACTERS,\n    CODE39_OTHER_CHARACTERS_ENCODE\n}","import {Character_Capacity_Table, Character_Count_Indicator, Mode_Indicator} from \"./encoding-structure\";\n\nfunction getQrMode(value) {\n    if (typeof value !== \"string\" || value === \"\") {\n        console.error(\"Dami-UI Qrcode: The value must be a non-empty string.\");\n        return;\n    } else if (!(/\\D/.test(value))) {\n        return \"numeric\";\n    } else if (/^[A-Z0-9 -\\.\\$\\/\\+\\%\\:\\*]*$/.test(value)) {\n        return \"alphanumeric\";\n    } else {\n        return \"byte\";\n    }\n}\n\nfunction getCodeCapacityAndVersion(value, modeType, correctionLevel) {\n    const charLength = value.length;\n\n    const capacity = Character_Capacity_Table[modeType][correctionLevel].find(val => val >= charLength);\n    const version = Character_Capacity_Table[modeType][correctionLevel].indexOf(capacity) + 1;\n\n    return {capacity, version};\n}\n\nfunction characterCountSize(version, modeType) {\n    if (version <= 9) {\n        return Character_Count_Indicator[0][modeType];\n    } else if (version <= 26) {\n        return Character_Count_Indicator[1][modeType];\n    } else {\n        return Character_Count_Indicator[2][modeType];\n    }\n}\n\nfunction getCharacterCountIndicator(value, version, modeType) {\n    const charLength = value.length;\n    const charCountLength = characterCountSize(version, modeType);\n\n    const charLenInBinary = charLength.toString(2).split(\"\");\n\n    while (charLenInBinary.length < charCountLength) {\n        charLenInBinary.unshift(\"0\");\n    }\n\n    return charLenInBinary.join(\"\");\n}\n\nexport function encodeData(value, correctionLevel) {\n    const modeType = getQrMode(value);\n\n    if (!modeType) return;\n\n    const {capacity, version} = getCodeCapacityAndVersion(value, modeType, correctionLevel);\n\n    if (!capacity || !version) return;\n\n    const modeIndicator = Mode_Indicator.get(modeType);\n\n    const characterCountIndicator = getCharacterCountIndicator(value, version, modeType);\n\n    if (!modeIndicator || !characterCountIndicator) return;\n\n    return [modeIndicator, characterCountIndicator];\n}","export const Error_Correction_Level = new Map([\n    [\"L\", 7],\n    [\"M\", 15],\n    [\"Q\", 25],\n    [\"H\", 30],\n]);\n\nexport const Mode_Indicator = new Map([\n    [\"numeric\", \"0001\"],\n    [\"alphanumeric\", \"0010\"],\n    [\"byte\", \"0100\"],\n]);\n\nexport const Character_Capacity_Table = {\n    numeric: {\n        L: [41, 77, 127, 187, 255, 322, 370, 461, 552, 652, 772, 883, 1022, 1101, 1250, 1408, 1548, 1725, 1903, 2061, 2232, 2409, 2620, 2812, 3057, 3283, 3517, 3669, 3909, 4158, 4417, 4686, 4965, 5253, 5529, 5836, 6153, 6479, 6743, 7089],\n        M: [34, 63, 101, 149, 202, 255, 293, 365, 432, 513, 604, 691, 796, 871, 991, 1082, 1212, 1346, 1500, 1600, 1708, 1872, 2059, 2188, 2395, 2544, 2701, 2857, 3035, 3289, 3486, 3693, 3909, 4134, 4343, 4588, 4775, 5039, 5313, 5596],\n        Q: [27, 48, 77, 111, 144, 178, 207, 259, 312, 364, 427, 489, 580, 621, 703, 775, 876, 948, 1063, 1159, 1224, 1358, 1468, 1588, 1718, 1804, 1933, 2085, 2181, 2358, 2473, 2670, 2805, 2949, 3081, 3244, 3417, 3599, 3791, 3993],\n        H: [17, 34, 58, 82, 106, 139, 154, 202, 235, 288, 331, 374, 427, 468, 530, 602, 674, 746, 813, 919, 969, 1056, 1108, 1228, 1286, 1425, 1501, 1581, 1677, 1782, 1897, 2022, 2157, 2301, 2361, 2524, 2625, 2735, 2927, 3057],\n    },\n    alphanumeric: {\n        L: [25, 47, 77, 114, 154, 195, 224, 279, 335, 395, 468, 535, 619, 667, 758, 854, 938, 1046, 1153, 1249, 1352, 1460, 1588, 1704, 1853, 1990, 2132, 2223, 2369, 2520, 2677, 2840, 3009, 3183, 3351, 3537, 3729, 3927, 4087, 4296],\n        M: [20, 38, 61, 90, 122, 154, 178, 221, 262, 311, 366, 419, 483, 528, 600, 656, 734, 816, 909, 970, 1035, 1134, 1248, 1326, 1451, 1542, 1637, 1732, 1839, 1994, 2113, 2238, 2369, 2506, 2632, 2780, 2894, 3054, 3220, 3391],\n        Q: [16, 29, 47, 67, 87, 108, 125, 157, 189, 221, 259, 296, 352, 376, 426, 470, 531, 574, 644, 702, 742, 823, 890, 963, 1041, 1094, 1172, 1263, 1322, 1429, 1499, 1618, 1700, 1787, 1867, 1966, 2071, 2181, 2298, 2420],\n        H: [10, 20, 35, 50, 64, 84, 93, 122, 143, 174, 200, 227, 259, 283, 321, 365, 408, 452, 493, 557, 587, 640, 672, 744, 779, 864, 910, 958, 1016, 1080, 1150, 1226, 1307, 1394, 1431, 1530, 1591, 1658, 1774, 1852],\n    },\n    byte: {\n        L: [17, 32, 53, 78, 106, 134, 154, 192, 230, 271, 321, 367, 425, 458, 520, 586, 644, 718, 792, 858, 929, 1003, 1091, 1171, 1273, 1367, 1465, 1528, 1628, 1732, 1840, 1952, 2068, 2188, 2303, 2431, 2563, 2699, 2809, 2953],\n        M: [14, 26, 42, 62, 84, 106, 122, 152, 180, 213, 251, 287, 331, 362, 412, 450, 504, 560, 624, 666, 711, 779, 857, 911, 997, 1059, 1125, 1190, 1264, 1370, 1452, 1538, 1628, 1722, 1809, 1911, 1989, 2099, 2213, 2331],\n        Q: [11, 20, 32, 46, 60, 74, 86, 108, 130, 151, 177, 203, 241, 258, 292, 322, 364, 394, 442, 482, 509, 565, 611, 661, 715, 751, 805, 868, 908, 982, 1030, 1112, 1168, 1228, 1283, 1351, 1423, 1499, 1579, 1663],\n        H: [7, 14, 24, 34, 44, 58, 64, 84, 98, 119, 137, 155, 177, 194, 220, 250, 280, 310, 338, 382, 403, 439, 461, 511, 535, 593, 625, 658, 698, 742, 790, 842, 898, 958, 983, 1051, 1093, 1139, 1219, 1273],\n    },\n};\n\nexport const Character_Count_Indicator = [\n    {numeric: 10, alphanumeric: 9, byte: 8},\n    {numeric: 12, alphanumeric: 11, byte: 16},\n    {numeric: 14, alphanumeric: 13, byte: 16},\n]","import { encodeData } from \"./encoding-service\";\n\nconst svgns = \"http://www.w3.org/2000/svg\";\n\nconst template = document.createElement(\"template\");\ntemplate.innerHTML = `\n    <style>\n        svg {\n            border: solid 1px rgba(0, 0, 0, 0.2);\n            border-radius: 10px;\n        }\n    </style>\n    <svg xmlns=\"${svgns}\"></svg>\n`\n\nclass DamiQrcode extends HTMLElement {\n    constructor() {\n        super();\n        this.initShadow();\n    }\n\n    initShadow() {\n        const shadow = this.attachShadow({mode: \"open\"});\n        shadow.append(template.content.cloneNode(true));\n        this.svgElm = shadow.querySelector(\"svg\");\n    }\n\n    connectedCallback() {\n        console.log(encodeData(\"HELLO WORLD\", \"Q\"));\n    }\n\n    static get observedAttributes() {\n        return [];\n    }\n    \n    attributeChangedCallback(name, oldValue, newValue) {\n        \n    }\n\n}\n\ncustomElements.define(\"dami-qrcode\", DamiQrcode);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import './barcode/barcode';\nimport './qrcode/qrcode';"],"names":[],"sourceRoot":""}